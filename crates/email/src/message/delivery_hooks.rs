/*
 * SPDX-FileCopyrightText: 2020 Stalwart Labs LLC <hello@stalw.art>
 *
 * SPDX-License-Identifier: AGPL-3.0-only OR LicenseRef-SEL
 */

//! Delivery hook functionality for intercepting and processing email delivery
//!
//! This module provides functionality to call external webhooks during email delivery,
//! allowing for custom routing, filtering, and message modification logic.

use common::{Server, config::jmap::settings::SpecialUse, expr::functions::ResolveVariable};
use futures::future::join_all;
use jmap_proto::types::keyword::Keyword;
use std::time::Instant;
use trc::AddContext;
use utils::config::utils::ParseValue;

use crate::{
    cache::{MessageCacheFetch, mailbox::MailboxCacheAccess},
    hooks::{self, client::send_delivery_hook_request, Action as HookAction, Modification},
    mailbox::{INBOX_ID, TRASH_ID, manage::MailboxFnc},
    sieve::ingest::SieveScriptIngest,
    message::delivery::AutogeneratedMessage,
};

use super::ingest::{EmailIngest, IngestEmail, IngestSource};

// Simple resolver for delivery hooks (no variables needed)
pub struct DeliveryResolver;

impl ResolveVariable for DeliveryResolver {
    fn resolve_variable(&self, _variable: u32) -> common::expr::Variable<'_> {
        // Delivery hooks don't use session variables, so return empty
        common::expr::Variable::default()
    }

    fn resolve_global(&self, _variable: &str) -> common::expr::Variable<'_> {
        // Delivery hooks don't use global variables, so return empty
        common::expr::Variable::default()
    }
}

/// Helper function to handle Sieve script processing after delivery hooks
pub async fn handle_sieve_script_ingest(
    server: &Server,
    uid: u32,
    raw_message: &[u8],
    parsed_message: Option<mail_parser::Message<'_>>,
    access_token: &common::auth::AccessToken,
    mailbox_ids: Vec<u32>,
    flags: Vec<String>,
    rcpt: &str,
    sender_address: &str,
    sender_authenticated: bool,
    session_id: u64,
    autogenerated: &mut Vec<AutogeneratedMessage>,
) -> trc::Result<super::ingest::IngestedEmail> {
    use directory::Permission;

    match server.sieve_script_get_active(uid).await {
        Ok(None) => {
            // No sieve script - ingest to specified mailboxes with flags from hooks
            let keywords: Vec<Keyword> = flags.into_iter().map(|f| Keyword::from(f)).collect();
            server.email_ingest(IngestEmail {
                raw_message,
                message: parsed_message,
                access_token,
                mailbox_ids,
                keywords,
                received_at: None,
                source: IngestSource::Smtp {
                    deliver_to: rcpt,
                    is_sender_authenticated: sender_authenticated,
                },
                spam_classify: access_token.has_permission(Permission::SpamFilterClassify),
                spam_train: server.email_bayes_can_train(access_token),
                session_id,
            })
            .await
        }
        Ok(Some(active_script)) => {
            // Run sieve script - it may override mailbox choices
            server.sieve_script_ingest(
                access_token,
                raw_message,
                sender_address,
                sender_authenticated,
                rcpt,
                session_id,
                active_script,
                autogenerated,
            )
            .await
        }
        Err(err) => Err(err),
    }
}

/// Try to call the delivery hook to determine mailbox filing
/// Returns:
/// - Ok(Some((mailbox_ids, flags, handled))) if hook specified mailbox(es) to file into
/// - Ok(None) if hook accepted without modifications (continue normal flow)
/// - Err if hook rejected the message
pub async fn try_delivery_hook(
    server: &Server,
    user_id: u32,
    sender: &str,
    recipient: &str,
    raw_message: &[u8],
    parsed_message: &Option<mail_parser::Message<'_>>,
    message_size: usize,
) -> trc::Result<Option<(Vec<u32>, Vec<String>, bool)>> {
    // Build envelope with SMTP hook types
    let envelope = hooks::Envelope {
        from: hooks::Address {
            address: sender.to_string(),
        },
        to: hooks::Address {
            address: recipient.to_string(),
        },
    };

    // Build message with SMTP hook types
    let message = if let Some(msg) = parsed_message {
        let headers = msg
            .root_part()
            .headers()
            .iter()
            .map(|h| {
                (
                    h.name().to_string(),
                    h.value().as_text().unwrap_or_default().to_string(),
                )
            })
            .collect();

        hooks::Message {
            headers,
            server_headers: vec![],
            contents: String::from_utf8_lossy(raw_message).into_owned(),
            size: message_size,
        }
    } else {
        hooks::Message {
            headers: vec![],
            server_headers: vec![],
            contents: String::from_utf8_lossy(raw_message).into_owned(),
            size: message_size,
        }
    };

    let request = hooks::Request::new(
        jmap_proto::types::id::Id::from(user_id).as_string(),
        user_id,
    )
    .with_envelope(envelope)
    .with_message(message);

    // Get configured delivery hooks
    let delivery_hooks = &server.core.smtp.session.delivery_hooks;

    // If no hooks configured, return None to continue normal flow
    if delivery_hooks.is_empty() {
        return Ok(None);
    }

    // Filter enabled hooks
    let resolver = DeliveryResolver;
    let mut enabled_hooks = Vec::new();
    for hook in delivery_hooks {
        if server.eval_if(&hook.enable, &resolver, 0).await.unwrap_or(false) {
            enabled_hooks.push(hook);
        }
    }

    if enabled_hooks.is_empty() {
        return Ok(None);
    }

    // Run all enabled hooks in parallel
    let mut hook_futures = Vec::new();
    for hook in enabled_hooks {
        let hook_request = request.clone();
        let time = Instant::now();
        hook_futures.push(async move {
            let result = send_delivery_hook_request(hook, hook_request).await;
            (hook, result, time.elapsed())
        });
    }

    let hook_results = join_all(hook_futures).await;

    // Process all hook results
    let mut all_mailbox_ids = Vec::new();
    let mut all_flags = Vec::new();
    let mut keep_in_inbox = true;
    let mut should_tempfail = false;
    let mut should_permfail = false;
    let mut any_accept_with_modifications = false;

    // Get mailbox cache for resolving mailbox names and special use folders
    let mut cache = server
        .get_cached_messages(user_id)
        .await
        .caused_by(trc::location!())?;

    for (hook, result, elapsed) in hook_results {
        match result {
            Ok(response) => {
                match response.action {
                    HookAction::Accept => {
                        trc::event!(
                            DeliveryHook(trc::DeliveryHookEvent::ActionAccept),
                            AccountId = user_id,
                            Details = format!("Hook '{}' accepted", hook.id),
                            Elapsed = elapsed,
                        );

                        // Handle response-level skip_inbox flag
                        if response.skip_inbox {
                            keep_in_inbox = false;
                        }

                        // Process modifications
                        for modification in response.modifications {
                            match modification {
                                Modification::FileInto {
                                    folder: mailbox,
                                    mailbox_id,
                                    flags,
                                    special_use,
                                    create,
                                } => {
                                    let mut target_id = u32::MAX;

                                    // Find mailbox by Id first (similar to sieve ingest logic)
                                    if !mailbox_id.is_empty() {
                                        if let Some(id) = jmap_proto::types::id::Id::from_bytes(
                                            mailbox_id.as_bytes(),
                                        ) {
                                            let document_id = id.document_id();
                                            if cache.has_mailbox_id(&document_id) {
                                                target_id = document_id;
                                            }
                                        }
                                    }

                                    // Find mailbox by special_use role if ID not found
                                    if let Some(special_use_role) = &special_use
                                        && target_id == u32::MAX
                                    {
                                        if special_use_role.eq_ignore_ascii_case("inbox") {
                                            target_id = INBOX_ID;
                                        } else if special_use_role.eq_ignore_ascii_case("trash") {
                                            target_id = TRASH_ID;
                                        } else if let Ok(role) = SpecialUse::parse_value(special_use_role)
                                            && let Some(item) = cache.mailbox_by_role(&role)
                                        {
                                            target_id = item.document_id;
                                        }
                                    }

                                    // Find mailbox by name
                                    if target_id == u32::MAX {
                                        if !create {
                                            if let Some(m) = cache.mailbox_by_path(&mailbox) {
                                                target_id = m.document_id;
                                            }
                                        } else if let Some(document_id) = server
                                            .mailbox_create_path(user_id, &mailbox)
                                            .await
                                            .caused_by(trc::location!())?
                                        {
                                            // Refresh cache after creating mailbox
                                            cache = server
                                                .get_cached_messages(user_id)
                                                .await
                                                .caused_by(trc::location!())?;
                                            target_id = document_id;
                                        }
                                    }

                                    // Default to INBOX if nothing else works
                                    if target_id == u32::MAX {
                                        target_id = INBOX_ID;
                                    }

                                    trc::event!(
                                        DeliveryHook(trc::DeliveryHookEvent::ActionFileInto),
                                        AccountId = user_id,
                                        Details = format!("Hook '{}': Filing into mailbox '{}' (resolved ID: {}) with flags: {:?}, special_use: {:?}, create: {}",
                                            hook.id, mailbox, target_id, flags, special_use, create),
                                    );

                                    if !all_mailbox_ids.contains(&target_id) {
                                        all_mailbox_ids.push(target_id);
                                    }

                                    // Collect flags for this modification
                                    for flag in flags {
                                        if !all_flags.contains(&flag) {
                                            all_flags.push(flag);
                                        }
                                    }

                                    any_accept_with_modifications = true;
                                }
                            }
                        }
                    }
                    HookAction::Reject => {
                        trc::event!(
                            DeliveryHook(trc::DeliveryHookEvent::ActionReject),
                            AccountId = user_id,
                            Details = format!("Hook '{}' rejected", hook.id),
                            Elapsed = elapsed,
                        );

                        // Check if this rejection should be a tempfail or permfail
                        if hook.tempfail_on_error {
                            should_tempfail = true;
                        } else {
                            should_permfail = true;
                        }
                    }
                }
            }
            Err(err) => {
                // Hook error - log and potentially fail
                trc::event!(
                    DeliveryHook(trc::DeliveryHookEvent::Error),
                    AccountId = user_id,
                    Details = format!("Hook '{}': {}", hook.id, err),
                    Elapsed = elapsed,
                );

                // If tempfail_on_error is set, hook errors should cause tempfail
                if hook.tempfail_on_error {
                    should_tempfail = true;
                }
            }
        }
    }

    // Check for failures - tempfail takes precedence over permfail for retry behavior
    if should_tempfail {
        return Err(trc::EventType::MessageIngest(trc::MessageIngestEvent::Error)
            .ctx(trc::Key::Reason, "Message temporarily rejected by delivery hook")
            .ctx(trc::Key::Code, 451));
    }

    if should_permfail {
        return Err(trc::EventType::MessageIngest(trc::MessageIngestEvent::Error)
            .ctx(trc::Key::Reason, "Message rejected by delivery hook")
            .ctx(trc::Key::Code, 550));
    }

    // If any hook specified mailboxes, file into those mailboxes
    if any_accept_with_modifications {
        // If keep_in_inbox is true, add INBOX_ID
        if keep_in_inbox && !all_mailbox_ids.contains(&INBOX_ID) {
            all_mailbox_ids.push(INBOX_ID);
        }

        trc::event!(
            DeliveryHook(trc::DeliveryHookEvent::ActionFileInto),
            AccountId = user_id,
            Details = format!("Filed into mailboxes: {:?}", all_mailbox_ids),
        );

        return Ok(Some((all_mailbox_ids, all_flags, true)));
    }

    // If no hooks handled the message, continue with normal flow
    Ok(None)
}
